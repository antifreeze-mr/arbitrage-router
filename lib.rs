// lib.rs - HFT Arbitrage Router: FULL INLINE (NO LIBSECP256K1 ISSUES)
use anchor_lang::prelude::*;
use anchor_spl::token::{Token, TokenAccount};
use anchor_spl::associated_token::get_associated_token_address;
use anchor_lang::solana_program::{
    instruction::{AccountMeta, Instruction},
};
use std::str::FromStr;

declare_id!("4xVUrp3J6t6FKrS61uWN6UZRCrvfMU97qa8uJJxncaP1");

#[program]
pub mod dex_arbitrage_router {
    use super::*;

    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        let router_state = &mut ctx.accounts.router_state;
        router_state.owner = ctx.accounts.owner.key();
        router_state.is_paused = false;
        router_state.bump = ctx.bumps.router_state;
        
        msg!("HFT Arbitrage Router initialized. Owner: {}", router_state.owner);
        Ok(())
    }

    /// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: ANCHOR 0.29 COMPATIBLE (EXPLICIT LIFETIMES)
    pub fn execute_arbitrage_batch<'info>(
        ctx: Context<'_, '_, 'info, 'info, ExecuteArbitrageBatch<'info>>,
        arbitrages: [ArbitrageParams; 4],
    ) -> Result<()> {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã (–ø–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –∑–∞—â–∏—Ç—ã)
        require!(!ctx.accounts.router_state.is_paused, MyErrorCode::ContractIsPaused);
        
        msg!("üöÄ Starting INLINE HFT arbitrage batch execution with 4 trades");

        // üéØ –ö–õ–Æ–ß–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: –ò–ó–í–õ–ï–ö–ê–ï–ú –í–°–ï –°–°–´–õ–ö–ò –î–û –¶–ò–ö–õ–ê (–†–ï–®–ê–ï–¢ LIFETIME –ü–†–û–ë–õ–ï–ú–´)
        let user = &ctx.accounts.user;
        let system_program = &ctx.accounts.system_program;
        let token_program = &ctx.accounts.token_program;
        let rent = &ctx.accounts.rent;
        let user_key = user.key();
        let system_program_key = system_program.key();
        let token_program_key = token_program.key();
        let rent_key = rent.key();

        // üîß –°–û–ó–î–ê–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´ –û–î–ò–ù –†–ê–ó (–ú–ò–ù–ò–ú–ò–ó–ò–†–£–ï–ú CRYPTO –û–ü–ï–†–ê–¶–ò–ò)
        let pump_program_id = Pubkey::from_str("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P").unwrap();
        let fee_recipient = Pubkey::from_str("CebN5WGQ4jvEPvsVU4EoHEpgzq1VV7AbicfhtW4xC9iM").unwrap();

        // 2. –ì–∏–±–∫–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ accounts_count
        let mut account_offset = 0;
        
        // 3. –ü–û–õ–ù–û–°–¢–¨–Æ INLINE –¶–ò–ö–õ: –í–°–Ø –õ–û–ì–ò–ö–ê –ü–†–Ø–ú–û –ó–î–ï–°–¨
        for (index, arbitrage) in arbitrages.iter().enumerate() {
            msg!("‚ö° Executing arbitrage #{} (FULL INLINE MODE)", index + 1);
            msg!("üìä Accounts needed: {}", arbitrage.accounts_count);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ä–µ–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            let start = account_offset;
            let end = start + arbitrage.accounts_count as usize;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            require!(
                ctx.remaining_accounts.len() >= end,
                MyErrorCode::InsufficientAccounts
            );
            
            let arbitrage_accounts_slice = &ctx.remaining_accounts[start..end];
            
            msg!("üîß Using accounts slice [{}, {})", start, end);
            
            msg!("üß† Go-bot parameters: buy {} tokens (max {} SOL), sell {} tokens (min {} wSOL)", 
                 arbitrage.tokens_to_buy, arbitrage.max_sol_cost, 
                 arbitrage.tokens_to_sell, arbitrage.min_wsol_out);

            // ====================================================================
            // üî• INLINE BUY INSTRUCTION CREATION
            // ====================================================================
            
            let buy_instruction = match arbitrage.buy_dex {
                DexType::PumpFun => {
                    msg!("üîß Creating Pump.fun BUY instruction inline...");
                    
                    // –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ inline (–ë–ï–ó CRYPTO –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô)
                    let mut pump_program_account = None;
                    let mut global_account = None;
                    let mut fee_recipient_account = None;
                    let mut mint_account = None;
                    let mut bonding_curve_account = None;
                    let mut user_token_account = None;
                    let mut event_authority_account = None;
                    
                    // Inline –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (COMPILE-TIME PUBKEYS)
                    for acc_info in arbitrage_accounts_slice {
                        // Pump program
                        if acc_info.key() == pump_program_id {
                            pump_program_account = Some(acc_info);
                        }
                        // Global PDA
                        let (expected_global, _) = Pubkey::find_program_address(&[b"global"], &pump_program_id);
                        if acc_info.key() == expected_global {
                            global_account = Some(acc_info);
                        }
                        // Fee recipient
                        if acc_info.key() == fee_recipient {
                            fee_recipient_account = Some(acc_info);
                        }
                        // Mint
                        if acc_info.key() == arbitrage.token_mint {
                            mint_account = Some(acc_info);
                        }
                        // Bonding curve PDA
                        let (expected_bonding_curve, _) = Pubkey::find_program_address(&[b"bonding-curve", arbitrage.token_mint.as_ref()], &pump_program_id);
                        if acc_info.key() == expected_bonding_curve {
                            bonding_curve_account = Some(acc_info);
                        }
                        // User token account
                        if acc_info.owner == &anchor_spl::token::ID && acc_info.data_len() == TokenAccount::LEN {
                            if let Ok(token_account) = TokenAccount::try_deserialize(&mut acc_info.data.borrow().as_ref()) {
                                if token_account.owner == user_key && token_account.mint == arbitrage.token_mint {
                                    user_token_account = Some(acc_info);
                                }
                            }
                        }
                        // Event authority PDA
                        let (expected_event_authority, _) = Pubkey::find_program_address(&[b"__event_authority"], &pump_program_id);
                        if acc_info.key() == expected_event_authority {
                            event_authority_account = Some(acc_info);
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
                    let pump_program_account = pump_program_account.ok_or(MyErrorCode::AccountNotFound)?;
                    let global_account = global_account.ok_or(MyErrorCode::PDAAccountNotFound)?;
                    let fee_recipient_account = fee_recipient_account.ok_or(MyErrorCode::AccountNotFound)?;
                    let mint_account = mint_account.ok_or(MyErrorCode::MintAccountNotFound)?;
                    let bonding_curve_account = bonding_curve_account.ok_or(MyErrorCode::PDAAccountNotFound)?;
                    let user_token_account = user_token_account.ok_or(MyErrorCode::TokenAccountNotFound)?;
                    let event_authority_account = event_authority_account.ok_or(MyErrorCode::PDAAccountNotFound)?;
                    
                    // –ù–∞—Ö–æ–¥–∏–º associated bonding curve (ATA)
                    let expected_ata = get_associated_token_address(&bonding_curve_account.key(), &arbitrage.token_mint);
                    let mut associated_bonding_curve_account = None;
                    for acc_info in arbitrage_accounts_slice {
                        if acc_info.key() == expected_ata {
                            associated_bonding_curve_account = Some(acc_info);
                            break;
                        }
                    }
                    let associated_bonding_curve_account = associated_bonding_curve_account.ok_or(MyErrorCode::AccountNotFound)?;
                    
                    // –°–æ–∑–¥–∞–µ–º instruction data
                    let mut instruction_data = Vec::new();
                    instruction_data.extend_from_slice(&[0x66, 0x06, 0x3d, 0x12, 0x01, 0xda, 0xeb, 0xea]); // buy discriminator
                    instruction_data.extend_from_slice(&arbitrage.tokens_to_buy.to_le_bytes());
                    instruction_data.extend_from_slice(&arbitrage.max_sol_cost.to_le_bytes());
                    
                    // –°–æ–∑–¥–∞–µ–º instruction
                    Instruction {
                        program_id: pump_program_id,
                        accounts: vec![
                            AccountMeta::new_readonly(global_account.key(), false),
                            AccountMeta::new(fee_recipient_account.key(), false),
                            AccountMeta::new_readonly(mint_account.key(), false),
                            AccountMeta::new(bonding_curve_account.key(), false),
                            AccountMeta::new(associated_bonding_curve_account.key(), false),
                            AccountMeta::new(user_token_account.key(), false),
                            AccountMeta::new(user_key, true),
                            AccountMeta::new_readonly(system_program_key, false),
                            AccountMeta::new_readonly(token_program_key, false),
                            AccountMeta::new_readonly(rent_key, false),
                            AccountMeta::new_readonly(event_authority_account.key(), false),
                            AccountMeta::new_readonly(pump_program_account.key(), false),
                        ],
                        data: instruction_data,
                    }
                },
                DexType::Meteora => {
                    msg!("üöß Meteora not implemented yet");
                    return Err(MyErrorCode::InvalidDexType.into());
                },
            };

            // –°–æ–∑–¥–∞–µ–º accounts –¥–ª—è buy invoke
            let buy_accounts = match arbitrage.buy_dex {
                DexType::PumpFun => {
                    let mut accounts = Vec::new();
                    
                    // –¢–µ –∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á—Ç–æ –≤ instruction, –Ω–æ –∫–∞–∫ AccountInfo
                    for acc_info in arbitrage_accounts_slice {
                        let (expected_global, _) = Pubkey::find_program_address(&[b"global"], &pump_program_id);
                        let (expected_bonding_curve, _) = Pubkey::find_program_address(&[b"bonding-curve", arbitrage.token_mint.as_ref()], &pump_program_id);
                        let expected_ata = get_associated_token_address(&expected_bonding_curve, &arbitrage.token_mint);
                        let (expected_event_authority, _) = Pubkey::find_program_address(&[b"__event_authority"], &pump_program_id);
                        
                        if acc_info.key() == expected_global ||
                           acc_info.key() == fee_recipient ||
                           acc_info.key() == arbitrage.token_mint ||
                           acc_info.key() == expected_bonding_curve ||
                           acc_info.key() == expected_ata ||
                           acc_info.key() == expected_event_authority ||
                           acc_info.key() == pump_program_id ||
                           (acc_info.owner == &anchor_spl::token::ID && acc_info.data_len() == TokenAccount::LEN) {
                            accounts.push(acc_info.clone());
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    accounts.push(user.to_account_info());
                    accounts.push(system_program.to_account_info());
                    accounts.push(token_program.to_account_info());
                    accounts.push(rent.to_account_info());
                    
                    accounts
                },
                DexType::Meteora => vec![],
            };

            // ====================================================================
            // üî• INLINE SELL INSTRUCTION CREATION
            // ====================================================================
            
            let sell_instruction = match arbitrage.sell_dex {
                DexType::PumpFun => {
                    msg!("üîß Creating Pump.fun SELL instruction inline...");
                    
                    // –°–æ–∑–¥–∞–µ–º instruction data –¥–ª—è sell
                    let mut instruction_data = Vec::new();
                    instruction_data.extend_from_slice(&[0x33, 0xe6, 0x85, 0xa4, 0x01, 0x7f, 0x83, 0xad]); // sell discriminator
                    instruction_data.extend_from_slice(&arbitrage.tokens_to_sell.to_le_bytes());
                    instruction_data.extend_from_slice(&arbitrage.min_wsol_out.to_le_bytes());
                    
                    // –¢–µ –∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á—Ç–æ –∏ –¥–ª—è buy (Pump.fun –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
                    Instruction {
                        program_id: pump_program_id,
                        accounts: buy_instruction.accounts.clone(), // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
                        data: instruction_data,
                    }
                },
                DexType::Meteora => {
                    msg!("üöß Meteora not implemented yet");
                    return Err(MyErrorCode::InvalidDexType.into());
                },
            };

            let sell_accounts = buy_accounts.clone(); // –î–ª—è Pump.fun —Ç–µ –∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã

            // ====================================================================
            // üöÄ –ê–¢–û–ú–ê–†–ù–û–ï –ò–°–ü–û–õ–ù–ï–ù–ò–ï: BUY -> SELL
            // ====================================================================
            
            msg!("üöÄ Executing BUY -> SELL atomically (INLINE)...");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º BUY
            anchor_lang::solana_program::program::invoke(&buy_instruction, &buy_accounts)?;
            msg!("‚úÖ BUY completed");
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º SELL
            anchor_lang::solana_program::program::invoke(&sell_instruction, &sell_accounts)?;
            msg!("‚úÖ SELL completed");
            
            msg!("üéâ Arbitrage #{} completed successfully (INLINE)", index + 1);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            account_offset = end;
        }

        msg!("üèÜ INLINE HFT arbitrage batch completed successfully - MAXIMUM SPEED!");
        Ok(())
    }

    /// Emergency stop: —Ç–æ–ª—å–∫–æ owner –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É/—Å–Ω—è—Ç—å —Å –ø–∞—É–∑—ã
    pub fn toggle_pause(ctx: Context<TogglePause>) -> Result<()> {
        let router_state = &mut ctx.accounts.router_state;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        require!(
            ctx.accounts.owner.key() == router_state.owner,
            MyErrorCode::UnauthorizedAccess
        );

        router_state.is_paused = !router_state.is_paused;
        
        msg!("üõë Router pause status changed to: {}", router_state.is_paused);
        Ok(())
    }
}

// ============================================================================
// üìä –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
// ============================================================================

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ (—Ö—Ä–∞–Ω–∏—Ç—Å—è on-chain)
#[account]
pub struct RouterState {
    pub owner: Pubkey,      // –í–ª–∞–¥–µ–ª–µ—Ü –¥–ª—è emergency operations
    pub is_paused: bool,    // –§–ª–∞–≥ –ø–∞—É–∑—ã (emergency stop)
    pub bump: u8,          // Bump –¥–ª—è PDA
}

/// üß† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–≤—Å–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ Go-–±–æ—Ç–æ–º –∑–∞—Ä–∞–Ω–µ–µ)
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
pub struct ArbitrageParams {
    pub token_mint: Pubkey,           // –ö–∞–∫–æ–π —Ç–æ–∫–µ–Ω –∞—Ä–±–∏—Ç—Ä–∏–º
    pub amount_in: u64,               // –°–∫–æ–ª—å–∫–æ wSOL –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    pub min_wsol_out: u64,            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (Go-–±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª)
    pub buy_dex: DexType,             // –ì–¥–µ –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω
    pub sell_dex: DexType,            // –ì–¥–µ –ø—Ä–æ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    
    // üéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ "–°–õ–ï–ü–û–ì–û –î–û–í–ï–†–ò–Ø":
    pub accounts_count: u8,           // –°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    pub tokens_to_buy: u64,           // –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫—É–ø–∞–µ–º (Go-–±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª)
    pub max_sol_cost: u64,            // –ú–∞–∫—Å–∏–º—É–º SOL —Ç—Ä–∞—Ç–∏–º (—Å —É—á–µ—Ç–æ–º slippage)
    pub tokens_to_sell: u64,          // –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–¥–∞–µ–º (Go-–±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–ª)
    // min_wsol_out —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ - –º–∏–Ω–∏–º—É–º –ø–æ–ª—É—á–∞–µ–º (—Å —É—á–µ—Ç–æ–º slippage)
}

/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ DEX-—ã
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug, PartialEq)]
pub enum DexType {
    Meteora,    // Meteora DLMM
    PumpFun,    // Pump.fun AMM
}

// ============================================================================
// üîß –ö–û–ù–¢–ï–ö–°–¢–´ –ò–ù–°–¢–†–£–ö–¶–ò–ô
// ============================================================================

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + 32 + 1 + 1, // discriminator + pubkey + bool + bump
        seeds = [b"router_state"],
        bump
    )]
    pub router_state: Account<'info, RouterState>,
    
    #[account(mut)]
    pub owner: Signer<'info>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct ExecuteArbitrageBatch<'info> {
    #[account(
        seeds = [b"router_state"],
        bump = router_state.bump
    )]
    pub router_state: Account<'info, RouterState>,
    
    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –∞—Ä–±–∏—Ç—Ä–∞–∂ (Go-–±–æ—Ç)
    #[account(mut)]
    pub user: Signer<'info>,
    
    /// wSOL –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –≤ –∫–æ–Ω—Ü–µ)
    #[account(mut)]
    pub user_wsol_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
    
    // üß† –ì–∏–±–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ remaining_accounts (Go-–±–æ—Ç —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç —á—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å):
    // –ö–∞–∂–¥—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç accounts_count –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    // –ë–∞—Ç—á –∏–∑ 4 –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π:
    // [0..accounts_count[0]] - –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ 1
    // [accounts_count[0]..accounts_count[0]+accounts_count[1]] - –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ 2
    // –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ...
}

#[derive(Accounts)]
pub struct TogglePause<'info> {
    #[account(
        mut,
        seeds = [b"router_state"],
        bump = router_state.bump
    )]
    pub router_state: Account<'info, RouterState>,
    
    pub owner: Signer<'info>,
}

// ============================================================================
// ‚ö†Ô∏è –ö–ê–°–¢–û–ú–ù–´–ï –û–®–ò–ë–ö–ò (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–µ–±–∞–≥–∞)
// ============================================================================

#[error_code]
pub enum MyErrorCode {
    #[msg("Contract is paused by the admin.")]
    ContractIsPaused,

    #[msg("Final profitability check failed. Not enough wSOL returned.")]
    NotProfitable,
    
    #[msg("An arithmetic operation overflowed.")]
    ArithmeticError,

    #[msg("Unauthorized access. Only owner can perform this operation.")]
    UnauthorizedAccess,

    #[msg("Invalid token account mint does not match expected token mint.")]
    InvalidTokenAccount,

    #[msg("Not enough remaining accounts provided.")]
    InsufficientAccounts,

    #[msg("Invalid DEX type specified.")]
    InvalidDexType,

    #[msg("Token account not found in remaining accounts.")]
    TokenAccountNotFound,

    #[msg("Mint account not found in remaining accounts.")]
    MintAccountNotFound,

    #[msg("PDA account not found in remaining accounts.")]
    PDAAccountNotFound,

    #[msg("Required account not found in remaining accounts.")]
    AccountNotFound,

    #[msg("Invalid program ID format.")]
    InvalidProgramId,

    #[msg("CPI call failed.")]
    CpiError,
}